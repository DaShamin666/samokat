#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ Samokat –≤ Docker

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–º–æ—â–∏
show_help() {
    echo -e "${BLUE}üõ¥ Samokat Docker Test Runner${NC}"
    echo -e "${BLUE}================================${NC}"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê] [–û–ü–¶–ò–ò]"
    echo ""
    echo -e "${YELLOW}–ö–æ–º–∞–Ω–¥—ã:${NC}"
    echo "  build              –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑"
    echo "  smoke              –ó–∞–ø—É—Å—Ç–∏—Ç—å smoke —Ç–µ—Å—Ç—ã (–±—ã—Å—Ç—Ä—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã)"
    echo "  regression         –ó–∞–ø—É—Å—Ç–∏—Ç—å regression —Ç–µ—Å—Ç—ã (–ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã)"
    echo "  full               –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"
    echo "  parallel           –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ"
    echo "  allure             –ó–∞–ø—É—Å—Ç–∏—Ç—å Allure —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤"
    echo "  clean              –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã"
    echo "  logs               –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo "  shell              –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"
    echo ""
    echo -e "${YELLOW}–û–ø—Ü–∏–∏:${NC}"
    echo "  --env=[dev|stage]  –û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: dev)"
    echo "  --args='...'       –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è pytest"
    echo "  --rebuild          –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"
    echo "  --help             –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo -e "${YELLOW}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
    echo "  $0 smoke                           # –ó–∞–ø—É—Å—Ç–∏—Ç—å smoke —Ç–µ—Å—Ç—ã"
    echo "  $0 regression --env=stage          # Regression —Ç–µ—Å—Ç—ã –Ω–∞ stage"
    echo "  $0 full --args='-k test_order'     # –í—Å–µ —Ç–µ—Å—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–æ–º"
    echo "  $0 parallel --rebuild              # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[–û–®–ò–ë–ö–ê]${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï]${NC} $1"
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
COMMAND=""
TEST_ENV="dev"
PYTEST_ARGS=""
REBUILD=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --env=*)
            TEST_ENV="${1#*=}"
            shift
            ;;
        --args=*)
            PYTEST_ARGS="${1#*=}"
            shift
            ;;
        --rebuild)
            REBUILD=true
            shift
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            if [[ -z "$COMMAND" ]]; then
                COMMAND="$1"
            else
                error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"
                show_help
                exit 1
            fi
            shift
            ;;
    esac
done

# –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
if [[ -z "$COMMAND" ]]; then
    show_help
    exit 1
fi

# –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è docker-compose
export TEST_ENV="$TEST_ENV"
export PYTEST_ARGS="$PYTEST_ARGS"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞
build_image() {
    log "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    docker-compose build samokat-tests
    log "‚úÖ –û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
clean_containers() {
    log "–û—á–∏—Å—Ç–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose down --rmi all --volumes --remove-orphans 2>/dev/null || true
    docker system prune -f
    log "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
show_logs() {
    log "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞..."
    docker-compose logs samokat-tests
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
enter_shell() {
    log "–í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏..."
    docker-compose run --rm samokat-tests /bin/bash
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Allure —Å–µ—Ä–≤–µ—Ä–∞
start_allure() {
    log "–ó–∞–ø—É—Å–∫ Allure —Å–µ—Ä–≤–µ—Ä–∞..."
    docker-compose --profile allure up -d allure-serve
    log "‚úÖ Allure —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5050"
    log "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: docker-compose --profile allure down"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥
case $COMMAND in
    build)
        build_image
        ;;
    
    smoke)
        log "üî• –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤ (–æ–∫—Ä—É–∂–µ–Ω–∏–µ: $TEST_ENV)"
        if [[ "$REBUILD" == "true" ]]; then
            build_image
        fi
        docker-compose run --rm samokat-smoke
        ;;
    
    regression)
        log "üîÑ –ó–∞–ø—É—Å–∫ regression —Ç–µ—Å—Ç–æ–≤ (–æ–∫—Ä—É–∂–µ–Ω–∏–µ: $TEST_ENV)"
        if [[ "$REBUILD" == "true" ]]; then
            build_image
        fi
        docker-compose run --rm samokat-regression
        ;;
    
    full)
        log "üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ (–æ–∫—Ä—É–∂–µ–Ω–∏–µ: $TEST_ENV)"
        if [[ "$REBUILD" == "true" ]]; then
            build_image
        fi
        docker-compose run --rm samokat-full
        ;;
    
    parallel)
        log "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ (–æ–∫—Ä—É–∂–µ–Ω–∏–µ: $TEST_ENV)"
        if [[ "$REBUILD" == "true" ]]; then
            build_image
        fi
        docker-compose run --rm samokat-parallel
        ;;
    
    allure)
        start_allure
        ;;
    
    clean)
        clean_containers
        ;;
    
    logs)
        show_logs
        ;;
    
    shell)
        enter_shell
        ;;
    
    *)
        error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $COMMAND"
        show_help
        exit 1
        ;;
esac

